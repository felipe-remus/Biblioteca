/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import model.ClienteVO;
import model.EmprestimoVO;
import model.LivroVO;
import model.ReservaVO;
import services.ClienteServicos;
import services.EmprestimoServicos;
import services.LivroServicos;
import services.ReservaServicos;
import services.ServicosFactory;
import util.EmprestimoCellRenderer;

/**
 *
 * @author FELIPEREMUSDEALMEIDA
 */
public class GUIEmprestimo extends javax.swing.JInternalFrame {
    private List<Integer> idsEmprestimos = new ArrayList<>();
    private int idEmprestimoEmEdicao = -1;
    private ReservaVO reservaOrigem = null;
    private Runnable aoConcluirReserva = null;
    
    DefaultTableModel dtm = new DefaultTableModel(
        new Object[][]{},
        new String[]{"Cliente", "Livro", "Retirada", "Prazo", "Status"}
    );
    /**
     * Creates new form GUIEmprestimo
     */
    public GUIEmprestimo() {
        initComponents();
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        jtfRetirada.setText(sdf.format(new Date()));
        jtfRetirada.setEditable(false);
        jtfPrazo.setText(getDataPrazoPadrao());
        
        jtEmprestimos.setModel(dtm);
        jbtnAlterar.setEnabled(false);
        
        EmprestimoCellRenderer renderer = new EmprestimoCellRenderer();
        for (int i = 0; i < jtEmprestimos.getColumnCount(); i++) {
            jtEmprestimos.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
        carregarListasIniciais();
        preencherTabela();
        setupFiltros();
    }
    
    public GUIEmprestimo(ClienteVO cliente, LivroVO livro, ReservaVO reserva, Runnable callback) {
        this();
        this.reservaOrigem = reserva;
         this.aoConcluirReserva = callback;

        SwingUtilities.invokeLater(() -> {
            for (int i = 0; i < jcbCliente.getItemCount(); i++) {
                Object item = jcbCliente.getItemAt(i);
                if (item instanceof ClienteVO && ((ClienteVO) item).getId_cliente() == cliente.getId_cliente()) {
                    jcbCliente.setSelectedIndex(i);
                    break;
                }
            }

            for (int i = 0; i < jcbLivro.getItemCount(); i++) {
                Object item = jcbLivro.getItemAt(i);
                if (item instanceof LivroVO && ((LivroVO) item).getIdLivro() == livro.getIdLivro()) {
                    jcbLivro.setSelectedIndex(i);
                    break;
                }
            }
        });
    }
    
    private void carregarListasIniciais() {
        carregarClientes("");
        carregarLivros("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jtfPrazo = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jtfCliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtfLivro = new javax.swing.JTextField();
        jcbCliente = new javax.swing.JComboBox<>();
        jcbLivro = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jtfRetirada = new javax.swing.JFormattedTextField();
        jtfEditarData = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jtfPesquisar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtEmprestimos = new javax.swing.JTable();
        jcbStatusFiltro = new javax.swing.JComboBox<>();
        jcbTipoPesquisa = new javax.swing.JComboBox<>();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jbtnCadastrar = new javax.swing.JButton();
        jbtnLimpar = new javax.swing.JButton();
        jbtnAlterar = new javax.swing.JButton();
        jbtnDeletar = new javax.swing.JButton();
        jbtnPreencher = new javax.swing.JButton();
        jbtnDevolver = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Emprest√≠mo");
        jLabel1.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Prazo:");

        try {
            jtfPrazo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfPrazo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Cliente:");

        jtfCliente.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtfCliente.setToolTipText("");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Livro:");

        jtfLivro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtfLivro.setToolTipText("");

        jcbCliente.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jcbLivro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Data de Hoje:");

        try {
            jtfRetirada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfRetirada.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jtfEditarData.setText("Editar Data");
        jtfEditarData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfEditarDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfLivro, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbLivro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPrazo, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfRetirada, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfEditarData)
                        .addGap(0, 139, Short.MAX_VALUE)))
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfPrazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtfRetirada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfEditarData))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jtfLivro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbLivro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(111, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cadastro", jPanel1);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("Pesquisar:");

        jtfPesquisar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtfPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisarKeyReleased(evt);
            }
        });

        jtEmprestimos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cliente", "Livro", "Retirada", "Prazo", "Status"
            }
        ));
        jScrollPane1.setViewportView(jtEmprestimos);

        jcbStatusFiltro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jcbStatusFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Devolvido", "N√¢o Devolvido" }));

        jcbTipoPesquisa.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jcbTipoPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Livro" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbTipoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbStatusFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbStatusFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbTipoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Manuten√ß√£o", jPanel2);

        jbtnCadastrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnCadastrar.setText("Cadastrar");
        jbtnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCadastrarActionPerformed(evt);
            }
        });
        jbtnCadastrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnCadastrarKeyPressed(evt);
            }
        });

        jbtnLimpar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnLimpar.setText("Limpar");
        jbtnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimparActionPerformed(evt);
            }
        });
        jbtnLimpar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnLimparKeyPressed(evt);
            }
        });

        jbtnAlterar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnAlterar.setText("Alterar");
        jbtnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAlterarActionPerformed(evt);
            }
        });

        jbtnDeletar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnDeletar.setText("Deletar");
        jbtnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeletarActionPerformed(evt);
            }
        });

        jbtnPreencher.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnPreencher.setText("Preencher");
        jbtnPreencher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPreencherActionPerformed(evt);
            }
        });

        jbtnDevolver.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnDevolver.setText("Devolvido");
        jbtnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDevolverActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jbtnCadastrar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnLimpar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnAlterar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnDeletar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnPreencher, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnDevolver, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jbtnCadastrar)
                .addGap(18, 18, 18)
                .addComponent(jbtnLimpar)
                .addGap(18, 18, 18)
                .addComponent(jbtnPreencher)
                .addGap(18, 18, 18)
                .addComponent(jbtnAlterar)
                .addGap(18, 18, 18)
                .addComponent(jbtnDeletar)
                .addGap(18, 18, 18)
                .addComponent(jbtnDevolver)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnCadastrar)
                    .addComponent(jbtnLimpar)
                    .addComponent(jbtnAlterar)
                    .addComponent(jbtnDeletar)
                    .addComponent(jbtnPreencher)
                    .addComponent(jbtnDevolver))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private String getDataPrazoPadrao() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date hoje = new Date();
        Date prazo = new Date(hoje.getTime() + 7L * 24 * 60 * 60 * 1000);
        return sdf.format(prazo);
    }
    
    private void cadastrarEmprestimo() {
        try {
            String dataStr = jtfPrazo.getText().trim();
            String data2Str = jtfRetirada.getText().trim();
            
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdf.setLenient(false); 
            Date dataprazo = sdf.parse(dataStr);
            Date datarretirada = sdf.parse(data2Str);
            
            if (jcbCliente.getSelectedItem() == null || jcbLivro.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Selecione cliente e livro!");
                return;
            }
            if (datarretirada == null || dataprazo == null) {
                JOptionPane.showMessageDialog(this, "Selecione as datas!");
                return;
            }

            EmprestimoVO eVO = new EmprestimoVO();
            eVO.setDtRetirada(datarretirada);
            eVO.setDtPrazo(dataprazo);

            ClienteVO cliente = (ClienteVO) jcbCliente.getSelectedItem();
            LivroVO livro = (LivroVO) jcbLivro.getSelectedItem();
            eVO.setIdCliente((int) cliente.getId_cliente());
            eVO.setIdLivro(livro.getIdLivro());
            
        LivroServicos ls = ServicosFactory.getLivroServicos();
        ArrayList<LivroVO> livrosDisponiveis = ls.buscarLivrosComFiltro("", "Dispon√≠vel");

        boolean disponivel = livrosDisponiveis.stream()
            .anyMatch(l -> l.getIdLivro() == livro.getIdLivro());

        if (!disponivel) {
            JOptionPane.showMessageDialog(this,
                "Livro indispon√≠vel no sistema!\n" +
                "Verifique a quantidade cadastrada e compare com os empr√©stimos n√£o devolvidos.",
                "Livro Indispon√≠vel",
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

            EmprestimoServicos es = ServicosFactory.getEmprestimoServicos();
            es.cadastrarEmprestimo(eVO);
            
            if (reservaOrigem != null) {
                ReservaServicos rs = ServicosFactory.getReservaServicos();
                reservaOrigem.setStatusReserva("Concluida");
                rs.atualizarStatusReserva(reservaOrigem);
            }
            
            if (aoConcluirReserva != null) {
                aoConcluirReserva.run();
            }
            
            JOptionPane.showMessageDialog(this, "Empr√©stimo cadastrado com sucesso!");
            
            limpar();
            preencherTabela();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar: " + e.getMessage());
        }
    }
    
    private void preencherTabela() {
        try {
            dtm.setNumRows(0);
            idsEmprestimos.clear(); 

            EmprestimoServicos es = ServicosFactory.getEmprestimoServicos();
            ArrayList<EmprestimoVO> emprestimos = es.buscarEmprestimos();

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            for (EmprestimoVO e : emprestimos) {
                String nomeLivroExibicao = e.getNomeLivro();
                try {
                    LivroServicos ls = ServicosFactory.getLivroServicos();
                    LivroVO livroVO = ls.buscarLivroPorId(e.getIdLivro());
                    if (livroVO != null) {
                        nomeLivroExibicao = livroVO.toString();
                    }
                } catch (Exception ex) {
                    nomeLivroExibicao = e.getNomeLivro() + " (erro ao carregar edi√ß√£o)";
                }

                dtm.addRow(new Object[]{
                    e.getNomeCliente(),
                    nomeLivroExibicao, 
                    sdf.format(e.getDtRetirada()),
                    sdf.format(e.getDtPrazo()),
                    e.getStatus()
                });
                idsEmprestimos.add(e.getIdEmprestimo());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao preencher tabela: " + e.getMessage());
        }
    }  
    
    private void filtrar() {
        try {
            String termo = jtfPesquisar.getText().trim();
            String tipo = (String) jcbTipoPesquisa.getSelectedItem();
            String statusSelecionado = (String) jcbStatusFiltro.getSelectedItem();
            String statusFiltro = "Todos".equals(statusSelecionado) ? null : statusSelecionado;

            dtm.setNumRows(0);
            idsEmprestimos.clear(); 

            EmprestimoServicos es = ServicosFactory.getEmprestimoServicos();
            ArrayList<EmprestimoVO> emprestimos;

            if (termo.isEmpty()) {
                if (statusFiltro == null) {
                    emprestimos = es.buscarEmprestimos();
                } else {
                    emprestimos = es.buscarEmprestimosPorStatus(statusFiltro);
                }
            } else {
                if ("Cliente".equals(tipo)) {
                    emprestimos = es.filtrarPorCliente(termo, statusFiltro);
                } else {
                    emprestimos = es.filtrarPorLivro(termo, statusFiltro);
                }
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            for (EmprestimoVO e : emprestimos) {
                String dtRetiradaStr = e.getDtRetirada() != null ? sdf.format(e.getDtRetirada()) : "";
                String dtPrazoStr = e.getDtPrazo() != null ? sdf.format(e.getDtPrazo()) : "";

                String nomeLivroExibicao = e.getNomeLivro(); 
                try {
                    LivroServicos ls = ServicosFactory.getLivroServicos();
                    LivroVO livroVO = ls.buscarLivroPorId(e.getIdLivro());
                    if (livroVO != null) {
                        nomeLivroExibicao = livroVO.toString();
                    }
                } catch (Exception ex) {
                }

                dtm.addRow(new Object[]{
                    e.getNomeCliente(),
                    nomeLivroExibicao,
                    dtRetiradaStr,
                    dtPrazoStr,
                    e.getStatus()
                });

                idsEmprestimos.add(e.getIdEmprestimo());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao filtrar: " + e.getMessage());
        }
    }
    
    private void deletar() {
        try {
            int linha = jtEmprestimos.getSelectedRow();
            if (linha == -1) {
                JOptionPane.showMessageDialog(this, "Selecione um empr√©stimo!");
                return;
            }

            if (idsEmprestimos.isEmpty() || linha >= idsEmprestimos.size()) {
                JOptionPane.showMessageDialog(this, "Dados inconsistentes.");
                preencherTabela();
                return;
            }

            int idEmprestimo = idsEmprestimos.get(linha);

            int confirma = JOptionPane.showConfirmDialog(this, "Excluir este empr√©stimo?", "Confirma√ß√£o", JOptionPane.YES_NO_OPTION);
            if (confirma == JOptionPane.YES_OPTION) {
                EmprestimoServicos es = ServicosFactory.getEmprestimoServicos();
                es.deletarEmprestimo(idEmprestimo);
                JOptionPane.showMessageDialog(this, "Empr√©stimo exclu√≠do!");
                preencherTabela();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao deletar: " + e.getMessage());
        }
    }
    
    private void preencherAlterar() {
        try {
            int linha = jtEmprestimos.getSelectedRow();
            if (linha == -1) {
                JOptionPane.showMessageDialog(this, "Selecione um empr√©stimo!");
                return;
            }

            if (idsEmprestimos.isEmpty() || linha >= idsEmprestimos.size()) {
                JOptionPane.showMessageDialog(this, "Dados inconsistentes.");
                return;
            }

            idEmprestimoEmEdicao = idsEmprestimos.get(linha);

            EmprestimoServicos es = ServicosFactory.getEmprestimoServicos();
            EmprestimoVO eVO = es.buscarEmprestimoPorId(idEmprestimoEmEdicao);

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            jtfRetirada.setText(eVO.getDtRetirada() != null ? sdf.format(eVO.getDtRetirada()) : "");
            jtfPrazo.setText(eVO.getDtPrazo() != null ? sdf.format(eVO.getDtPrazo()) : "");
            jtfRetirada.setEditable(true);

            carregarClientes("");
            carregarLivros("");

            for (int i = 0; i < jcbCliente.getItemCount(); i++) {
                Object item = jcbCliente.getItemAt(i);
                if (item instanceof ClienteVO && ((ClienteVO) item).getId_cliente() == eVO.getIdCliente()) {
                    jcbCliente.setSelectedIndex(i);
                    break;
                }
            }

            // Seleciona livro
            for (int i = 0; i < jcbLivro.getItemCount(); i++) {
                Object item = jcbLivro.getItemAt(i);
                if (item instanceof LivroVO && ((LivroVO) item).getIdLivro() == eVO.getIdLivro()) {
                    jcbLivro.setSelectedIndex(i);
                    break;
                }
            }
            jTabbedPane1.setSelectedIndex(0);
            jbtnCadastrar.setEnabled(false); 
            jbtnAlterar.setEnabled(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao preencher: " + e.getMessage());
        }
    }
    
    private void confirmarAlterar() {
        try {
            if (idEmprestimoEmEdicao == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum empr√©stimo selecionado para altera√ß√£o.");
                return;
            }

            String dataPrazoStr = jtfPrazo.getText().trim();
            String dataRetiradaStr = jtfRetirada.getText().trim();

            if (dataPrazoStr.isEmpty() || dataRetiradaStr.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Preencha as datas!");
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdf.setLenient(false);
            Date dtPrazo = sdf.parse(dataPrazoStr);
            Date dtRetirada = sdf.parse(dataRetiradaStr);

            ClienteVO cliente = (ClienteVO) jcbCliente.getSelectedItem();
            LivroVO livro = (LivroVO) jcbLivro.getSelectedItem();

            if (cliente == null || livro == null) {
                JOptionPane.showMessageDialog(null, "Selecione cliente e livro!");
                return;
            }

            EmprestimoVO eVO = new EmprestimoVO();
            eVO.setIdEmprestimo(idEmprestimoEmEdicao); // ‚úÖ
            eVO.setDtRetirada(dtRetirada);
            eVO.setDtPrazo(dtPrazo);
            eVO.setIdCliente((int) cliente.getId_cliente());
            eVO.setIdLivro(livro.getIdLivro());

            EmprestimoServicos es = ServicosFactory.getEmprestimoServicos();
            es.atualizarEmprestimo(eVO);

            JOptionPane.showMessageDialog(null, "Empr√©stimo alterado com sucesso!");

            limpar();
            idEmprestimoEmEdicao = -1;
            jbtnCadastrar.setEnabled(true);
            jbtnAlterar.setEnabled(false);

            preencherTabela();

        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Formato de data inv√°lido. Use dd/MM/yyyy.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao alterar: " + e.getMessage());
        }
    }
    
    private void devolverLivro() {
        try {
            int linha = jtEmprestimos.getSelectedRow();
            if (linha == -1) {
                JOptionPane.showMessageDialog(this, "Selecione um empr√©stimo!");
                return;
            }

            if (idsEmprestimos.isEmpty() || linha >= idsEmprestimos.size()) {
                JOptionPane.showMessageDialog(this, "Dados inconsistentes.");
                return;
            }

            int idEmprestimo = idsEmprestimos.get(linha);

            EmprestimoServicos es = ServicosFactory.getEmprestimoServicos();
            EmprestimoVO eVO = es.buscarEmprestimoPorId(idEmprestimo);

            java.sql.Date dtDevolucao = new java.sql.Date(System.currentTimeMillis());
            double multa = 0.0;

            if ("Nao Devolvido".equals(eVO.getStatus()) && eVO.getDtPrazo() != null) {
                multa = es.calcularMulta((java.sql.Date) eVO.getDtPrazo(), dtDevolucao);
            }

            // Mostrar mensagem com multa se houver
            String mensagem = "Registrar devolu√ß√£o?";
            if (multa > 0) {
                mensagem += "\n\n‚ö†Ô∏è MULTA POR ATRASO: R$ " + String.format("%.2f", multa);
            }

            int confirma = JOptionPane.showConfirmDialog(this, mensagem, "Confirma√ß√£o", JOptionPane.YES_NO_OPTION);
            if (confirma == JOptionPane.YES_OPTION) {
                es.devolverLivro(idEmprestimo, dtDevolucao, multa);
                JOptionPane.showMessageDialog(this, "Devolu√ß√£o registrada!" + 
                    (multa > 0 ? "\nMulta aplicada: R$ " + String.format("%.2f", multa) : ""));
                preencherTabela();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao devolver: " + e.getMessage());
        }
    }
    
    private void limpar() {
        jtfPrazo.setText(null);
        jtfRetirada.setText(null);
        jtfCliente.setText(null);
        jtfLivro.setText(null);
        carregarListasIniciais();
        dtm.setNumRows(0);
        jbtnAlterar.setEnabled(false);
        jbtnCadastrar.setEnabled(true);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        jtfRetirada.setText(sdf.format(new Date()));
        jtfRetirada.setEditable(false);

    }
    
    private void carregarClientes(String filtro) {
        try {
            ClienteServicos cs = ServicosFactory.getClienteServicos();
            
            String query = "WHERE nome_cliente LIKE '%" + filtro + "%'";
            
            ArrayList<ClienteVO> clientes = cs.filtrarCliente(query);
            DefaultComboBoxModel<ClienteVO> model = new DefaultComboBoxModel<>();
            for (ClienteVO c : clientes) {
                model.addElement(c);
            }
            jcbCliente.setModel(model);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void carregarLivros(String filtro) {
        try {
            LivroServicos ls = ServicosFactory.getLivroServicos();
            ArrayList<LivroVO> livros;

            if (filtro == null || filtro.trim().isEmpty()) {
                livros = ls.buscarLivros();
            } else {
                livros = ls.filtrarLivrosPorNomeEEdicao(filtro.trim());
            }

            DefaultComboBoxModel<LivroVO> model = new DefaultComboBoxModel<>();
            for (LivroVO l : livros) {
                model.addElement(l); 
            }
            jcbLivro.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar livros: " + e.getMessage());
        }
    }
    
    private void setupFiltros() {
        // Filtro de cliente (cadastro)
        jtfCliente.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { carregarClientes(jtfCliente.getText()); }
            public void removeUpdate(DocumentEvent e) { carregarClientes(jtfCliente.getText()); }
            public void insertUpdate(DocumentEvent e) { carregarClientes(jtfCliente.getText()); }
        });

        // Filtro de livro (cadastro)
        jtfLivro.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { carregarLivros(jtfLivro.getText()); }
            public void removeUpdate(DocumentEvent e) { carregarLivros(jtfLivro.getText()); }
            public void insertUpdate(DocumentEvent e) { carregarLivros(jtfLivro.getText()); }
        });

        // Filtro principal (tabela)
        jtfPesquisar.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { filtrar(); }
            public void removeUpdate(DocumentEvent e) { filtrar(); }
            public void insertUpdate(DocumentEvent e) { filtrar(); }
        });

        jcbTipoPesquisa.addActionListener(e -> filtrar());
        jcbStatusFiltro.addActionListener(e -> filtrar());
    }
    
    private void jtfPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisarKeyReleased
        limpar();
        filtrar();
    }//GEN-LAST:event_jtfPesquisarKeyReleased

    private void jbtnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCadastrarActionPerformed
        cadastrarEmprestimo();
    }//GEN-LAST:event_jbtnCadastrarActionPerformed

    private void jbtnCadastrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnCadastrarKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            cadastrarEmprestimo();
        }
    }//GEN-LAST:event_jbtnCadastrarKeyPressed

    private void jbtnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimparActionPerformed
        limpar();
    }//GEN-LAST:event_jbtnLimparActionPerformed

    private void jbtnLimparKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnLimparKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            limpar();
        }
    }//GEN-LAST:event_jbtnLimparKeyPressed

    private void jbtnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAlterarActionPerformed
        confirmarAlterar();
    }//GEN-LAST:event_jbtnAlterarActionPerformed

    private void jbtnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeletarActionPerformed
        deletar();
    }//GEN-LAST:event_jbtnDeletarActionPerformed

    private void jbtnPreencherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPreencherActionPerformed
        preencherAlterar();
    }//GEN-LAST:event_jbtnPreencherActionPerformed

    private void jbtnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDevolverActionPerformed
        devolverLivro();
    }//GEN-LAST:event_jbtnDevolverActionPerformed

    private void jtfEditarDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfEditarDataActionPerformed
        jtfRetirada.setEditable(true);

    }//GEN-LAST:event_jtfEditarDataActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbtnAlterar;
    private javax.swing.JButton jbtnCadastrar;
    private javax.swing.JButton jbtnDeletar;
    private javax.swing.JButton jbtnDevolver;
    private javax.swing.JButton jbtnLimpar;
    private javax.swing.JButton jbtnPreencher;
    private javax.swing.JComboBox<ClienteVO> jcbCliente;
    private javax.swing.JComboBox<LivroVO> jcbLivro;
    private javax.swing.JComboBox<String> jcbStatusFiltro;
    private javax.swing.JComboBox<String> jcbTipoPesquisa;
    private javax.swing.JTable jtEmprestimos;
    private javax.swing.JTextField jtfCliente;
    private javax.swing.JButton jtfEditarData;
    private javax.swing.JTextField jtfLivro;
    private javax.swing.JTextField jtfPesquisar;
    private javax.swing.JFormattedTextField jtfPrazo;
    private javax.swing.JFormattedTextField jtfRetirada;
    // End of variables declaration//GEN-END:variables
}
