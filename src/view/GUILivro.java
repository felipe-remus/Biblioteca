/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import java.awt.event.KeyEvent;
import java.text.ParseException;
import model.*;
import services.*;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FELIPEREMUSDEALMEIDA
 */
public class GUILivro extends javax.swing.JInternalFrame {
    private List<Integer> idsLivros = new ArrayList<>();
    private int idLivroEmEdicao = -1;
    private GUIMenuPrincipal menuPrincipal;
    
    DefaultTableModel dtm = new DefaultTableModel(
        new Object[][]{},
        new String[]{"Nome","Edição", "Lançamento", "ISBN", "Editora", "Autor(s)", "Gênero(s)", "Quantidade"}
    );
    /**
     * Creates new form GUILivro
     */
    public GUILivro() {
        initComponents();
        jtLivros.setModel(dtm);
        jcbDisponibilidade.setModel(new DefaultComboBoxModel<>(new String[]{"Todos", "Disponível", "Indisponível"}));
        
        carregarListasIniciais();
        preencherTabela();
        
        // Estado inicial dos botões
        jbtnAlterar.setEnabled(false);
        jbtnCadastrar.setEnabled(true);
        
        setupFiltros();
    }
    
    public GUILivro(GUIMenuPrincipal menu) {
        this(); 
        this.menuPrincipal = menu;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtfNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfISBN = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfEditora = new javax.swing.JTextField();
        jtfDTLancamento = new javax.swing.JFormattedTextField();
        jcbEditora = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jtfAutor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtfGenero = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlAutor = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlGenero = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jtfQTD = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jtfEdicao = new javax.swing.JTextField();
        jbtnEditora = new javax.swing.JButton();
        jbtnAutor = new javax.swing.JButton();
        jbtnGenero = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jtfPesquisar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtLivros = new javax.swing.JTable();
        jcbDisponibilidade = new javax.swing.JComboBox<>();
        jcbTipoPesquisa = new javax.swing.JComboBox<>();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jbtnCadastrar = new javax.swing.JButton();
        jbtnLimpar = new javax.swing.JButton();
        jbtnAlterar = new javax.swing.JButton();
        jbtnDeletar = new javax.swing.JButton();
        jbtnPreencher = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Livro");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Nome:");

        jtfNome.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Data de Lançamento:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ISBN:");

        try {
            jtfISBN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-##-#####-##-#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfISBN.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Editora:");

        jtfEditora.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtfEditora.setToolTipText("");

        try {
            jtfDTLancamento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfDTLancamento.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jcbEditora.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Autor:");

        jtfAutor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtfAutor.setToolTipText("");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Gênero:");

        jtfGenero.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtfGenero.setToolTipText("");

        jScrollPane2.setViewportView(jlAutor);

        jScrollPane3.setViewportView(jlGenero);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Quantidade:");

        jtfQTD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Edição:");

        jtfEdicao.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jbtnEditora.setText("Ir a Cadstro de Editora");
        jbtnEditora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditoraActionPerformed(evt);
            }
        });

        jbtnAutor.setText("Ir a Cadastro de Autor");
        jbtnAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAutorActionPerformed(evt);
            }
        });

        jbtnGenero.setText("Ir a Cadastro de Gênero");
        jbtnGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGeneroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfQTD, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfEdicao))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnEditora))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfDTLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(jtfAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7))
                                    .addComponent(jbtnAutor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jbtnGenero)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                                        .addComponent(jtfGenero)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtfDTLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jtfEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jtfISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jtfQTD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfEditora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbEditora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnEditora))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jtfGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnAutor)
                    .addComponent(jbtnGenero))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cadastro", jPanel1);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("Pesquisar:");

        jtfPesquisar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtfPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisarKeyReleased(evt);
            }
        });

        jtLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "Ediçao", "Lançamento", "ISBN", "Editora", "Autor(s)", "Gênero(s)", "Quantidade"
            }
        ));
        jScrollPane1.setViewportView(jtLivros);

        jcbDisponibilidade.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jcbDisponibilidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Disponível", "Indisponível" }));

        jcbTipoPesquisa.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jcbTipoPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "Edição", "Editora", "Autor", "Gênero" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbTipoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbDisponibilidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jtfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbDisponibilidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbTipoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Manutenção", jPanel2);

        jbtnCadastrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnCadastrar.setText("Cadastrar");
        jbtnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCadastrarActionPerformed(evt);
            }
        });
        jbtnCadastrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnCadastrarKeyPressed(evt);
            }
        });

        jbtnLimpar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnLimpar.setText("Limpar");
        jbtnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimparActionPerformed(evt);
            }
        });
        jbtnLimpar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnLimparKeyPressed(evt);
            }
        });

        jbtnAlterar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnAlterar.setText("Alterar");
        jbtnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAlterarActionPerformed(evt);
            }
        });

        jbtnDeletar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnDeletar.setText("Deletar");
        jbtnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeletarActionPerformed(evt);
            }
        });

        jbtnPreencher.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnPreencher.setText("Preencher");
        jbtnPreencher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPreencherActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jbtnCadastrar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnLimpar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnAlterar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnDeletar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jbtnPreencher, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnCadastrar)
                .addGap(18, 18, 18)
                .addComponent(jbtnLimpar)
                .addGap(18, 18, 18)
                .addComponent(jbtnPreencher)
                .addGap(18, 18, 18)
                .addComponent(jbtnAlterar)
                .addGap(18, 18, 18)
                .addComponent(jbtnDeletar)
                .addGap(79, 79, 79))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnCadastrar)
                    .addComponent(jbtnLimpar)
                    .addComponent(jbtnAlterar)
                    .addComponent(jbtnDeletar)
                    .addComponent(jbtnPreencher))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void carregarListasIniciais() {
        carregarEditoras("");
        carregarAutores("");
        carregarGeneros("");
    }

    private void cadastrarLivro() {
        try {
            String dataStr = jtfDTLancamento.getText().trim();
            if (dataStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Informe a data de lançamento!");
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdf.setLenient(false); 
            Date dataLancamento = sdf.parse(dataStr);

            String qtdStr = jtfQTD.getText().trim();
            int quantidade = 1; 
            if (!qtdStr.isEmpty()) {
                try {
                    quantidade = Integer.parseInt(qtdStr);
                    if (quantidade <= 0) {
                        JOptionPane.showMessageDialog(this, "A quantidade deve ser maior que zero!");
                        return;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Quantidade inválida! Digite um número inteiro.");
                    return;
                }
            }

            LivroVO lVO = new LivroVO();
            lVO.setNomeLivro(jtfNome.getText().trim());
            lVO.setDtLancamento(dataLancamento);
            lVO.setIsbn(jtfISBN.getText().trim());
            lVO.setEdicao(jtfEdicao.getText().trim());    
            lVO.setQuantidade(quantidade);                

            EditoraVO editora = (EditoraVO) jcbEditora.getSelectedItem();
            if (editora == null) {
                JOptionPane.showMessageDialog(this, "Selecione uma editora!");
                return;
            }
            int idEditora = editora.getIdeditora(); 
            if (idEditora <= 0) {
                JOptionPane.showMessageDialog(this, "Editora inválida!");
                return;
            }
            lVO.setIdEditora(idEditora);

            List<Integer> autoresIds = new ArrayList<>();
            for (Object obj : jlAutor.getSelectedValuesList()) {
                AutorVO a = (AutorVO) obj;
                autoresIds.add(a.getIdautor());
            }
            lVO.setAutoresIds(autoresIds);

            List<Integer> generosIds = new ArrayList<>();
            for (Object obj : jlGenero.getSelectedValuesList()) {
                GeneroVO g = (GeneroVO) obj;
                generosIds.add(g.getIdgenero());
            }
            lVO.setGenerosIds(generosIds);

            LivroServicos ls = ServicosFactory.getLivroServicos();
            ls.cadastrarLivro(lVO);

            JOptionPane.showMessageDialog(this, "Livro cadastrado com sucesso!");

            limpar();
            preencherTabela();

        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Data inválida! Use dd/MM/yyyy");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar: " + e.getMessage());
        }
    }

    private void preencherTabela() {
        try {
            dtm.setNumRows(0);
            idsLivros.clear(); 

            LivroServicos ls = ServicosFactory.getLivroServicos();
            ArrayList<LivroVO> livros = ls.buscarLivros();

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            for (LivroVO l : livros) {
                String dataLancamento = "";
                if (l.getDtLancamento() != null) {
                    dataLancamento = sdf.format(l.getDtLancamento());
                }

                // Junta autores e gêneros
                String autores = String.join(", ", l.getNomesAutores());
                String generos = String.join(", ", l.getNomesGeneros());

                dtm.addRow(new Object[]{
                    l.getNomeLivro(),        
                    l.getEdicao() != null ? l.getEdicao() : "", 
                    dataLancamento,             
                    l.getIsbn(),                
                    l.getNomeEditora(),         
                    autores,                    
                    generos,
                    l.getQuantidade()
                });

                idsLivros.add(l.getIdLivro());
            }

            jtLivros.setModel(dtm);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao preencher tabela: " + e.getMessage());
        }
    }

    private void filtrarLivros() {
        try {
            String termo = jtfPesquisar.getText().trim();
            String tipoFiltro = (String) jcbTipoPesquisa.getSelectedItem();
            String disponibilidade = (String) jcbDisponibilidade.getSelectedItem();

            dtm.setNumRows(0);
            idsLivros.clear();

            LivroServicos ls = ServicosFactory.getLivroServicos();
            ArrayList<LivroVO> livros;

            if (termo.isEmpty()) {
                // Sem termo de pesquisa → usa o filtro de disponibilidade apenas
                livros = ls.buscarLivrosComFiltro("", disponibilidade);
            } else {
                // Com termo de pesquisa → usa o novo método de filtragem avançada
                livros = ls.filtrarLivrosAvancado(termo, tipoFiltro, disponibilidade);
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            for (LivroVO l : livros) {
                String dataLancamento = "";
                if (l.getDtLancamento() != null) {
                    dataLancamento = sdf.format(l.getDtLancamento());
                }

                String autores = String.join(", ", l.getNomesAutores());
                String generos = String.join(", ", l.getNomesGeneros());

                dtm.addRow(new Object[]{
                    l.getNomeLivro(),       
                    l.getEdicao() != null ? l.getEdicao() : "",
                    dataLancamento,             
                    l.getIsbn(),                
                    l.getNomeEditora(),         
                    autores,                    
                    generos,
                    l.getQuantidade()
                });

                idsLivros.add(l.getIdLivro());
            }

            jtLivros.setModel(dtm);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao filtrar livros: " + e.getMessage());
        }
    }
    
    private void deletarLivro() {
        try {
            int linha = jtLivros.getSelectedRow();
            if (linha == -1) {
                JOptionPane.showMessageDialog(this, "Selecione um livro para excluir!");
                return;
            }

            if (idsLivros.isEmpty() || linha >= idsLivros.size()) {
                JOptionPane.showMessageDialog(this, "Dados inconsistentes. Tente recarregar a lista.");
                preencherTabela();
                return;
            }

            int idLivro = idsLivros.get(linha);

            int confirma = JOptionPane.showConfirmDialog(
                this,
                "Tem certeza que deseja excluir este livro?\nEssa ação também removerá seus vínculos com autores e gêneros.",
                "Confirmar Exclusão",
                JOptionPane.YES_NO_OPTION
            );

            if (confirma == JOptionPane.YES_OPTION) {
                LivroServicos ls = ServicosFactory.getLivroServicos();
                ls.deletarLivro(idLivro);
                JOptionPane.showMessageDialog(this, "Livro excluído com sucesso!");
                preencherTabela(); 
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir livro: " + e.getMessage());
        }
    }

    private void preencherAlterar() {
        try {
            int linha = jtLivros.getSelectedRow();
            if (linha == -1) {
                JOptionPane.showMessageDialog(this, "Selecione um livro para alterar!");
                return;
            }

            if (idsLivros.isEmpty() || linha >= idsLivros.size()) {
                JOptionPane.showMessageDialog(this, "Dados inconsistentes. Recarregue a lista.");
                preencherTabela();
                return;
            }

            idLivroEmEdicao = idsLivros.get(linha);

            jTabbedPane1.setSelectedIndex(0);

            LivroServicos ls = ServicosFactory.getLivroServicos();
            LivroVO lVO = ls.buscarLivroPorId(idLivroEmEdicao);

            jtfNome.setText(lVO.getNomeLivro());
            jtfEdicao.setText(lVO.getEdicao() != null ? lVO.getEdicao() : "");
            jtfISBN.setText(lVO.getIsbn());
            jtfQTD.setText(String.valueOf(lVO.getQuantidade())); // ✅ quantidade

            if (lVO.getDtLancamento() != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                jtfDTLancamento.setText(sdf.format(lVO.getDtLancamento()));
            } else {
                jtfDTLancamento.setText("");
            }

            // =============== Editora ===============
            carregarEditoras(""); // recarrega sem filtro
            for (int i = 0; i < jcbEditora.getItemCount(); i++) {
                Object item = jcbEditora.getItemAt(i);
                if (item instanceof EditoraVO) {
                    EditoraVO editora = (EditoraVO) item;
                    if (editora.getIdeditora() == lVO.getIdEditora()) {
                        jcbEditora.setSelectedIndex(i);
                        break;
                    }
                }
            }

            // =============== Autores ===============
            carregarAutores(""); // recarrega lista de autores
            List<Integer> autoresDoLivro = lVO.getAutoresIds();
            jlAutor.clearSelection();

            for (int i = 0; i < jlAutor.getModel().getSize(); i++) {
                Object item = jlAutor.getModel().getElementAt(i);
                if (item instanceof AutorVO) {
                    AutorVO autor = (AutorVO) item;
                    if (autoresDoLivro.contains(autor.getIdautor())) {
                        jlAutor.addSelectionInterval(i, i);
                    }
                }
            }

            // =============== Gêneros ===============
            carregarGeneros(""); // recarrega lista de gêneros
            List<Integer> generosDoLivro = lVO.getGenerosIds();
            jlGenero.clearSelection();

            for (int i = 0; i < jlGenero.getModel().getSize(); i++) {
                Object item = jlGenero.getModel().getElementAt(i);
                if (item instanceof GeneroVO) {
                    GeneroVO genero = (GeneroVO) item;
                    if (generosDoLivro.contains(genero.getIdgenero())) {
                        jlGenero.addSelectionInterval(i, i);
                    }
                }
            }

            jbtnCadastrar.setEnabled(false);
            jbtnAlterar.setEnabled(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao preencher dados para alteração: " + e.getMessage());
        }
    }

    private void confirmarAlterar() {
        try {
            if (idLivroEmEdicao == -1) {
                JOptionPane.showMessageDialog(this, "Nenhum livro selecionado para alteração.");
                return;
            }

            String nome = jtfNome.getText().trim();
            String isbn = jtfISBN.getText().trim();
            String dataStr = jtfDTLancamento.getText().trim();

            if (nome.isEmpty() || isbn.isEmpty() || dataStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Preencha Nome, ISBN e Data de Lançamento!");
                return;
            }

            int quantidade;
            try {
                quantidade = Integer.parseInt(jtfQTD.getText().trim());
                if (quantidade <= 0) {
                    JOptionPane.showMessageDialog(this, "A quantidade deve ser maior que zero!");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Quantidade inválida! Digite um número inteiro.");
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdf.setLenient(false);
            Date dataLancamento = sdf.parse(dataStr);

            LivroVO lVO = new LivroVO();
            lVO.setIdLivro(idLivroEmEdicao);
            lVO.setNomeLivro(nome);
            lVO.setIsbn(isbn);
            lVO.setEdicao(jtfEdicao.getText().trim());
            lVO.setDtLancamento(dataLancamento);
            lVO.setQuantidade(quantidade);

            EditoraVO editora = (EditoraVO) jcbEditora.getSelectedItem();
            if (editora == null) {
                JOptionPane.showMessageDialog(this, "Selecione uma editora!");
                return;
            }
            lVO.setIdEditora(editora.getIdeditora());

            LivroServicos ls = ServicosFactory.getLivroServicos();

            ls.atualizarLivro(lVO);

            List<Integer> autoresSelecionados = new ArrayList<>();
            for (Object obj : jlAutor.getSelectedValuesList()) {
                if (obj instanceof AutorVO) {
                    autoresSelecionados.add(((AutorVO) obj).getIdautor());
                }
            }
            ls.atualizarAutoresDoLivro(idLivroEmEdicao, autoresSelecionados);

            List<Integer> generosSelecionados = new ArrayList<>();
            for (Object obj : jlGenero.getSelectedValuesList()) {
                if (obj instanceof GeneroVO) {
                    generosSelecionados.add(((GeneroVO) obj).getIdgenero());
                }
            }
            ls.atualizarGenerosDoLivro(idLivroEmEdicao, generosSelecionados);

            JOptionPane.showMessageDialog(this, "Livro alterado com sucesso!");

            limpar();
            idLivroEmEdicao = -1;

            preencherTabela();

        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Data inválida! Use o formato dd/MM/yyyy.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao alterar livro: " + e.getMessage());
        }
    }

    private void limpar() {
        jtfNome.setText(null);
        jtfDTLancamento.setText(null);
        jtfISBN.setText(null);
        jtfEdicao.setText(null);
        jtfQTD.setText(null);
        jtfEditora.setText(null);
        jtfGenero.setText(null);
        jtfAutor.setText(null);
        carregarListasIniciais();
        dtm.setNumRows(0);
        jbtnAlterar.setEnabled(false);
        jbtnCadastrar.setEnabled(true);
    }

    private void carregarEditoras(String filtro) {
        try {
            EditoraServicos es = ServicosFactory.getEditoraServicos();
            if (es == null) {
                JOptionPane.showMessageDialog(this, "Serviço de Editora não disponível.");
                return;
            }

            String query = "";
            if (!filtro.trim().isEmpty()) {
                query = "WHERE nome_editora LIKE '%" + filtro.trim() + "%'";
            }
            ArrayList<EditoraVO> editoras = es.filtar(query); 

            DefaultComboBoxModel<EditoraVO> model = new DefaultComboBoxModel<>();
            for (EditoraVO e : editoras) {
                model.addElement(e);
            }
            jcbEditora.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar editoras: " + e.getMessage());
        }
    }
    
    private void carregarAutores(String filtro) {
        try {
            AutorServicos as = ServicosFactory.getAutorServicos();
            ArrayList<AutorVO> autores = as.filtrarAutor(filtro);

            DefaultListModel<AutorVO> model = new DefaultListModel<>();
            for (AutorVO a : autores) {
                model.addElement(a);
            }
            jlAutor.setModel(model);
            jlAutor.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void carregarGeneros(String filtro) {
        try {
            GeneroServicos gs = ServicosFactory.getGeneroServicos();
            ArrayList<GeneroVO> generos = gs.filtarGenero(filtro); // ← só o texto!

            DefaultListModel<GeneroVO> model = new DefaultListModel<>();
            for (GeneroVO g : generos) {
                model.addElement(g); // ← objeto completo
            }

            jlGenero.setModel(model); // ← substitua "jListGenero" pelo nome real

            jlGenero.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar gêneros: " + e.getMessage());
        }
    }
    
    private void setupFiltros() {
        // Editora (cadastro)
        jtfEditora.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { carregarEditoras(jtfEditora.getText()); }
            public void removeUpdate(DocumentEvent e) { carregarEditoras(jtfEditora.getText()); }
            public void insertUpdate(DocumentEvent e) { carregarEditoras(jtfEditora.getText()); }
        });

        // Autor (cadastro)
        jtfAutor.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { carregarAutores(jtfAutor.getText()); }
            public void removeUpdate(DocumentEvent e) { carregarAutores(jtfAutor.getText()); }
            public void insertUpdate(DocumentEvent e) { carregarAutores(jtfAutor.getText()); }
        });

        // Gênero (cadastro)
        jtfGenero.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { carregarGeneros(jtfGenero.getText()); }
            public void removeUpdate(DocumentEvent e) { carregarGeneros(jtfGenero.getText()); }
            public void insertUpdate(DocumentEvent e) { carregarGeneros(jtfGenero.getText()); }
        });

        // Campo de pesquisa (tabela)
        jtfPesquisar.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { filtrarLivros(); }
            public void removeUpdate(DocumentEvent e) { filtrarLivros(); }
            public void insertUpdate(DocumentEvent e) { filtrarLivros(); }
        });
        
        // ComboBox de tipo de pesquisa
        jcbTipoPesquisa.addActionListener(e -> filtrarLivros());
    
        // ComboBox de disponibilidade (tabela)
        jcbDisponibilidade.addActionListener(e -> filtrarLivros());
    }
    
    private void jtfPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisarKeyReleased
        limpar();
        filtrarLivros();
    }//GEN-LAST:event_jtfPesquisarKeyReleased

    private void jbtnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCadastrarActionPerformed
        cadastrarLivro();
    }//GEN-LAST:event_jbtnCadastrarActionPerformed

    private void jbtnCadastrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnCadastrarKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            cadastrarLivro();
        }
    }//GEN-LAST:event_jbtnCadastrarKeyPressed

    private void jbtnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimparActionPerformed
        limpar();
    }//GEN-LAST:event_jbtnLimparActionPerformed

    private void jbtnLimparKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnLimparKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            limpar();
        }
    }//GEN-LAST:event_jbtnLimparKeyPressed

    private void jbtnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAlterarActionPerformed
        confirmarAlterar();
    }//GEN-LAST:event_jbtnAlterarActionPerformed

    private void jbtnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeletarActionPerformed
        deletarLivro();
    }//GEN-LAST:event_jbtnDeletarActionPerformed

    private void jbtnPreencherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPreencherActionPerformed
        preencherAlterar();
    }//GEN-LAST:event_jbtnPreencherActionPerformed

    private void jbtnEditoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditoraActionPerformed
        if (menuPrincipal != null) {
            menuPrincipal.abrirGUIEditora();
        }
    }//GEN-LAST:event_jbtnEditoraActionPerformed

    private void jbtnAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAutorActionPerformed
        if (menuPrincipal != null) {
            menuPrincipal.abrirGUIAutor();
        }
    }//GEN-LAST:event_jbtnAutorActionPerformed

    private void jbtnGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGeneroActionPerformed
        if (menuPrincipal != null) {
            menuPrincipal.abrirGUIGenero();
        }
    }//GEN-LAST:event_jbtnGeneroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbtnAlterar;
    private javax.swing.JButton jbtnAutor;
    private javax.swing.JButton jbtnCadastrar;
    private javax.swing.JButton jbtnDeletar;
    private javax.swing.JButton jbtnEditora;
    private javax.swing.JButton jbtnGenero;
    private javax.swing.JButton jbtnLimpar;
    private javax.swing.JButton jbtnPreencher;
    private javax.swing.JComboBox<String> jcbDisponibilidade;
    private javax.swing.JComboBox<EditoraVO> jcbEditora;
    private javax.swing.JComboBox<String> jcbTipoPesquisa;
    private javax.swing.JList<AutorVO> jlAutor;
    private javax.swing.JList<GeneroVO> jlGenero;
    private javax.swing.JTable jtLivros;
    private javax.swing.JTextField jtfAutor;
    private javax.swing.JFormattedTextField jtfDTLancamento;
    private javax.swing.JTextField jtfEdicao;
    private javax.swing.JTextField jtfEditora;
    private javax.swing.JTextField jtfGenero;
    private javax.swing.JFormattedTextField jtfISBN;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextField jtfPesquisar;
    private javax.swing.JTextField jtfQTD;
    // End of variables declaration//GEN-END:variables
}